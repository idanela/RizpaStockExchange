package stockExchangeEngine;

import autoGeneratedWeb.RizpaStockExchangeDescriptor;
import autoGeneratedWeb.RseHoldings;
import autoGeneratedWeb.RseItem;
import autoGeneratedWeb.RseStock;
import holding.Holding;
import stocks.Stock;
import transaction.*;
import user.User;
import xmlRizpaDataExtractor.XmlRizpaDataExtractor;

import java.io.InputStream;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

public class StockExchangeEngine implements IStockEngine
{
    Map<String, User> users;
    private Map<String,Stock> m_AllStocks;
    private List<Transaction> m_PendingBuyTransactions;
    private List<Transaction> m_PendingSellTransactions;
    private List<Transaction> m_Transactions;

    public synchronized void addUser(User user)
    {
        users.put(user.getName(),user);
    }
    public synchronized Map<String, User> getUsers() {
        return users;
    }

    public StockExchangeEngine() {
        this.users = new HashMap<>();
        this.m_AllStocks = new HashMap<>();
        this.m_Transactions = new LinkedList<>();
        this.m_PendingBuyTransactions = new LinkedList<>();
        this.m_PendingSellTransactions = new LinkedList<>();
    }

    @Override
    public List<Transaction> getPendingSellTransactions() {
        return m_PendingSellTransactions;
    }

    @Override
    public List<Transaction> getPendingBuyTransactions() {
        return m_PendingBuyTransactions;
    }

    @Override
    public Map<String,Stock> getStocks() {
        return this.m_AllStocks;
    }

    public Stock getStock(String symbol)
    {
        Stock returnedStock = null;
        for (Stock stock : m_AllStocks.values()) {
            if(stock.getStockName().equals(symbol))
            {
                returnedStock =stock;
                break;
            }
        }
            return returnedStock;
    }

    @Override
    public List<Transaction> getTransactionList() {
        return m_Transactions;
    }


    @Override
    public void addTransactionsMade(List<TransactionMade> transactionsMade) {
        for (TransactionMade transactionMade:transactionsMade)
        {
            addTransactionMade(transactionMade);
        }
    }

    @Override
    public void addTransactionMade(TransactionMade transactionMade)
    {
        transactionMade.getStock().setNumOfTransaction(transactionMade.getStock().getNumOfTransaction()+1);
        transactionMade.getStock().setTransactionsWorth(transactionMade.getStock().getTransactionsWorth()+transactionMade.getTransactionWorth());
        m_Transactions.add(transactionMade);
    }

    public boolean addStock(Stock stock)
    {
        boolean isStockAdded = false;
        if(!m_AllStocks.containsKey(stock.getStockName()))
        {
            m_AllStocks.put(stock.getStockName(),stock);
            isStockAdded = true;
        }

        return isStockAdded;
    }
    public synchronized boolean getXmlContent(User user, InputStream inputStream, AtomicBoolean hasSameCompany, AtomicBoolean hasSameName, AtomicBoolean hasInValidStock)
    {
        boolean xmlContentLoaded = true;
        RizpaStockExchangeDescriptor descriptor = XmlRizpaDataExtractor.getStocks(inputStream,hasSameCompany,hasSameName,hasInValidStock);
        if(descriptor == null)
        {
            xmlContentLoaded = false;
        }
        else
        {
            loadClasses(user,descriptor);
        }

        return xmlContentLoaded;
    }
    @Override
    public boolean getXmlContent(String path, AtomicBoolean hasSameCompany, AtomicBoolean hasSameName,AtomicBoolean hasInValidStock) {
        boolean xmlContentLoaded = true;
        RizpaStockExchangeDescriptor descriptor = XmlRizpaDataExtractor.getStocks(path,hasSameCompany,hasSameName,hasInValidStock);
        if(descriptor == null)
        {
            xmlContentLoaded = false;
        }
        else
        {
            //Todo:earse user + arbitrary false.
            User user =new User("idan", false);
            loadClasses(user, descriptor);
        }

        return xmlContentLoaded;
    }

    private void loadClasses(User user, RizpaStockExchangeDescriptor descriptor)
    {
       List<RseStock> stocks = descriptor.getRseStocks().getRseStock();
       if(m_AllStocks==null)
       m_AllStocks = new HashMap<>();
       for (RseStock stock : stocks)
       {
           if(!m_AllStocks.containsKey(stock.getRseSymbol()))
            m_AllStocks.put(stock.getRseSymbol(),new Stock(stock));
       }

       List<RseItem> holdings = descriptor.getRseHoldings().getRseItem();
       for(RseItem item:holdings)
       {
           Stock stock = m_AllStocks.get(item.getSymbol());
           user.addHoldings(item,stock);
       }

    }

    public void setStockNewPrice(List<TransactionMade> transactionsMade) {
        if(transactionsMade.size()!=0)
        {
            TransactionMade transaction = transactionsMade.get(transactionsMade.size()-1);
            m_AllStocks.get(transaction.getStock().getStockName()).setCurrentPrice(transaction.getPriceOfStock());
        }
    }
}
