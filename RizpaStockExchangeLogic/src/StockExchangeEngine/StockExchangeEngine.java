package StockExchangeEngine;

import AutoGenerated.RizpaStockExchangeDescriptor;
import AutoGenerated.RseStock;
import Stocks.Stock;
import Transaction.ITransaction;
import XmlRizpaDataExtractor.XmlRizpaDataExtractor;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

public class StockExchangeEngine implements IStockEngine
{
    Map<String,Stock> m_AllStocks;
    List<ITransaction> m_Transactions;

    public StockExchangeEngine() {
        this.m_AllStocks = new HashMap<>();
        this.m_Transactions = new ArrayList<>();
    }

    @Override
    public Map<String,Stock> getStocks() {
        return this.m_AllStocks;
    }

    @Override
    public List<ITransaction> getTransactionlist() {
        return m_Transactions;
    }

    @Override
    public boolean findTransaction(String stockName, double limit, int amountForTransaction) {
        return false;
    }

    @Override
    public void addPendingSell(Stock stock) {

    }

    @Override
    public boolean getXmlContent(StringBuilder msg , String path) {
        boolean xmlContentLoaded = true;
        RizpaStockExchangeDescriptor descriptor = XmlRizpaDataExtractor.getStocks(msg,path);
        if(descriptor == null)
        {
            xmlContentLoaded=false;
        }
        else
        {
            loadClasses(descriptor);
        }

        return xmlContentLoaded;
    }

    private void loadClasses(RizpaStockExchangeDescriptor descriptor)
    {
       List<RseStock> stocks = descriptor.getRseStocks().getRseStock();
       for (RseStock stock : stocks)
       {

       }
    }

    @Override
    public void addPendingPurchase(Stock stock) {

    }

    @Override
    public void preformTransaction(ITransaction toSell, ITransaction toBuy) {

    }

    @Override
    public void presentAllStocksTransactions() throws IOException {
        m_AllStocks.values().forEach(stock->stock.addTransactionToStocksTransactionsList(););
        try(Writer out = new BufferedWriter(
               (new OutputStreamWriter(new FileOutputStream("allStocksTransaction.txt"))))) {
            for (Stock stock : m_AllStocks.values()) {
                out.write(stock.getAllTransaction() + System.lineSeparator());
            }
        }
    }

}
